/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package works.hop.model.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class TaskList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskList\",\"namespace\":\"works.hop.model.avro\",\"fields\":[{\"name\":\"list\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"Task\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"task\",\"type\":\"string\"},{\"name\":\"completed\",\"type\":\"boolean\"}]}]}]}}]}");
    private static final long serialVersionUID = 6600419204771566514L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<TaskList> ENCODER =
            new BinaryMessageEncoder<TaskList>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<TaskList> DECODER =
            new BinaryMessageDecoder<TaskList>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<TaskList>
            WRITER$ = (org.apache.avro.io.DatumWriter<TaskList>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<TaskList>
            READER$ = (org.apache.avro.io.DatumReader<TaskList>) MODEL$.createDatumReader(SCHEMA$);
    @Deprecated
    public java.util.List<java.lang.Object> list;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public TaskList() {
    }

    /**
     * All-args constructor.
     *
     * @param list The new value for list
     */
    public TaskList(java.util.List<java.lang.Object> list) {
        this.list = list;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<TaskList> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<TaskList> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<TaskList> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<TaskList>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a TaskList from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a TaskList instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static TaskList fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new TaskList RecordBuilder.
     *
     * @return A new TaskList RecordBuilder
     */
    public static works.hop.model.avro.TaskList.Builder newBuilder() {
        return new works.hop.model.avro.TaskList.Builder();
    }

    /**
     * Creates a new TaskList RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new TaskList RecordBuilder
     */
    public static works.hop.model.avro.TaskList.Builder newBuilder(works.hop.model.avro.TaskList.Builder other) {
        if (other == null) {
            return new works.hop.model.avro.TaskList.Builder();
        } else {
            return new works.hop.model.avro.TaskList.Builder(other);
        }
    }

    /**
     * Creates a new TaskList RecordBuilder by copying an existing TaskList instance.
     *
     * @param other The existing instance to copy.
     * @return A new TaskList RecordBuilder
     */
    public static works.hop.model.avro.TaskList.Builder newBuilder(works.hop.model.avro.TaskList other) {
        if (other == null) {
            return new works.hop.model.avro.TaskList.Builder();
        } else {
            return new works.hop.model.avro.TaskList.Builder(other);
        }
    }

    /**
     * Serializes this TaskList to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return list;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                list = (java.util.List<java.lang.Object>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'list' field.
     *
     * @return The value of the 'list' field.
     */
    public java.util.List<java.lang.Object> getList() {
        return list;
    }

    /**
     * Sets the value of the 'list' field.
     *
     * @param value the value to set.
     */
    public void setList(java.util.List<java.lang.Object> value) {
        this.list = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    /**
     * RecordBuilder for TaskList instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskList>
            implements org.apache.avro.data.RecordBuilder<TaskList> {

        private java.util.List<java.lang.Object> list;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(works.hop.model.avro.TaskList.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.list)) {
                this.list = data().deepCopy(fields()[0].schema(), other.list);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
        }

        /**
         * Creates a Builder by copying an existing TaskList instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(works.hop.model.avro.TaskList other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.list)) {
                this.list = data().deepCopy(fields()[0].schema(), other.list);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'list' field.
         *
         * @return The value.
         */
        public java.util.List<java.lang.Object> getList() {
            return list;
        }


        /**
         * Sets the value of the 'list' field.
         *
         * @param value The value of 'list'.
         * @return This builder.
         */
        public works.hop.model.avro.TaskList.Builder setList(java.util.List<java.lang.Object> value) {
            validate(fields()[0], value);
            this.list = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'list' field has been set.
         *
         * @return True if the 'list' field has been set, false otherwise.
         */
        public boolean hasList() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'list' field.
         *
         * @return This builder.
         */
        public works.hop.model.avro.TaskList.Builder clearList() {
            list = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public TaskList build() {
            try {
                TaskList record = new TaskList();
                record.list = fieldSetFlags()[0] ? this.list : (java.util.List<java.lang.Object>) defaultValue(fields()[0]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

}










